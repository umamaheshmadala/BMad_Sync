template:
  id: frontend-architecture-template-v2
  name: Frontend Architecture Document
  version: 2.0
  output:
    format: markdown
    filename: docs/ui-architecture.md
    title: "{{project_name}} Frontend Architecture Document"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: template-framework-selection
    title: Template and Framework Selection
    instruction: |
      Review provided documents including PRD, UX-UI Specification, and main Architecture Document. Focus on extracting technical implementation details needed for AI frontend tools and developer agents. Ask the user for any of these documents if you are unable to locate and were not provided.
      
      Before proceeding with frontend architecture design, check if the project is using a frontend starter template or existing codebase:
      
      1. Review the PRD, main architecture document, and brainstorming brief for mentions of:
         - Frontend starter templates (e.g., Create React App, Next.js, Vite, Vue CLI, Angular CLI, etc.)
         - UI kit or component library starters
         - Existing frontend projects being used as a foundation
         - Admin dashboard templates or other specialized starters
         - Design system implementations
      
      2. If a frontend starter template or existing project is mentioned:
         - Ask the user to provide access via one of these methods:
           - Link to the starter template documentation
           - Upload/attach the project files (for small projects)
           - Share a link to the project repository
         - Analyze the starter/existing project to understand:
           - Pre-installed dependencies and versions
           - Folder structure and file organization
           - Built-in components and utilities
           - Styling approach (CSS modules, styled-components, Tailwind, etc.)
           - State management setup (if any)
           - Routing configuration
           - Testing setup and patterns
           - Build and development scripts
         - Use this analysis to ensure your frontend architecture aligns with the starter's patterns
      
      3. If no frontend starter is mentioned but this is a new UI, ensure we know what the ui language and framework is:
         - Based on the framework choice, suggest appropriate starters:
           - React: Create React App, Next.js, Vite + React
           - Vue: Vue CLI, Nuxt.js, Vite + Vue
           - Angular: Angular CLI
           - Or suggest popular UI templates if applicable
         - Explain benefits specific to frontend development
      
      4. If the user confirms no starter template will be used:
         - Note that all tooling, bundling, and configuration will need manual setup
         - Proceed with frontend architecture from scratch
      
      Document the starter template decision and any constraints it imposes before proceeding.
    sections:
      - id: changelog
        title: Change Log
        type: table
        columns: [Date, Version, Description, Author]
        instruction: Track document versions and changes

  - id: frontend-tech-stack
    title: Frontend Tech Stack
    instruction: Extract from main architecture's Technology Stack Table. This section MUST remain synchronized with the main architecture document.
    elicit: true
    sections:
      - id: tech-stack-table
        title: Technology Stack Table
        type: table
        columns: [Category, Technology, Version, Purpose, Rationale]
        instruction: Fill in appropriate technology choices based on the selected framework and project requirements.
        rows:
          - ["Framework", "{{framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["UI Library", "shadcn/ui", "latest", "Reusable and accessible UI components", "Leveraging a robust component library for rapid development and accessibility."]
          - ["State Management", "{{state_management}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Routing", "{{routing_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Build Tool", "{{build_tool}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Styling", "Tailwind CSS with Custom Themes (shadcn/ui)", "latest", "Utility-first CSS framework with theming capabilities", "Provides highly customizable styling with integrated theming support."]
          - ["Testing", "{{test_framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Component Library", "{{component_lib}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Form Handling", "{{form_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Animation", "{{animation_lib}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["Dev Tools", "{{dev_tools}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]

  - id: project-structure
    title: Project Structure
    instruction: Define exact directory structure for AI tools based on the chosen framework. Be specific about where each type of file goes. Generate a structure that follows the framework's best practices and conventions.
    elicit: true
    type: code
    language: plaintext

  - id: component-standards
    title: Component Standards
    instruction: Define exact patterns for component creation based on the chosen framework.
    elicit: true
    sections:
      - id: component-template
        title: Component Template
        instruction: Generate a minimal but complete component template following the framework's best practices. Include TypeScript types, proper imports, and basic structure.
        type: code
        language: typescript
      - id: naming-conventions
        title: Naming Conventions
        instruction: Provide naming conventions specific to the chosen framework for components, files, services, state management, and other architectural elements.

  - id: state-management
    title: State Management
    instruction: Define state management patterns based on the chosen framework.
    elicit: true
    sections:
      - id: store-structure
        title: Store Structure
        instruction: Generate the state management directory structure appropriate for the chosen framework and selected state management solution.
        type: code
        language: plaintext
      - id: state-template
        title: State Management Template
        instruction: Provide a basic state management template/example following the framework's recommended patterns. Include TypeScript types and common operations like setting, updating, and clearing state.
        type: code
        language: typescript

  - id: api-integration
    title: API Integration
    instruction: Define API service patterns based on the chosen framework.
    elicit: true
    sections:
      - id: service-template
        title: Service Template
        instruction: Provide an API service template that follows the framework's conventions. Include proper TypeScript types, error handling, and async patterns.
        type: code
        language: typescript
      - id: api-client-config
        title: API Client Configuration
        instruction: Show how to configure the HTTP client for the chosen framework, including authentication interceptors/middleware and error handling.
        type: code
        language: typescript

  - id: routing
    title: Routing
    instruction: Define routing structure and patterns based on the chosen framework.
    elicit: true
    sections:
      - id: route-configuration
        title: Route Configuration
        instruction: Provide routing configuration appropriate for the chosen framework. Include protected route patterns, lazy loading where applicable, and authentication guards/middleware.
        type: code
        language: typescript

  - id: styling-guidelines
    title: Styling Guidelines
    instruction: Define styling approach based on the chosen framework.
    elicit: true
    sections:
      - id: styling-approach
        title: Styling Approach
        instruction: Describe the styling methodology appropriate for the chosen framework (CSS Modules, Styled Components, Tailwind, etc.) and provide basic patterns.
        template: |
          Our frontend utilizes **Tailwind CSS** for utility-first styling, enhanced by **shadcn/ui's** theming system. This approach involves defining design tokens (colors, spacing, etc.) as **CSS variables** which Tailwind can then consume. This allows for easy customization and dynamic theme switching, including support for light and dark modes, and custom themes like "Cosmic Night".
      - id: global-theme
        title: Global Theme Variables
        instruction: Provide a CSS custom properties (CSS variables) theme system that works across all frameworks. Include colors, spacing, typography, shadows, and dark mode support.
        template: '''
          :root {
            --background: oklch(0.9730 0.0133 286.1503);
            --foreground: oklch(0.3015 0.0572 282.4176);
            --card: oklch(1.0000 0 0);
            --card-foreground: oklch(0.3015 0.0572 282.4176);
            --popover: oklch(1.0000 0 0);
            --popover-foreground: oklch(0.3015 0.0572 282.4176);
            --primary: oklch(0.5417 0.1790 288.0332);
            --primary-foreground: oklch(1.0000 0 0);
            --secondary: oklch(0.9174 0.0435 292.6901);
            --secondary-foreground: oklch(0.4143 0.1039 288.1742);
            --muted: oklch(0.9580 0.0133 286.1454);
            --muted-foreground: oklch(0.5426 0.0465 284.7435);
            --accent: oklch(0.9221 0.0373 262.1410);
            --accent-foreground: oklch(0.3015 0.0572 282.4176);
            --destructive: oklch(0.6861 0.2061 14.9941);
            --destructive-foreground: oklch(1.0000 0 0);
            --border: oklch(0.9115 0.0216 285.9625);
            --input: oklch(0.9115 0.0216 285.9625);
            --ring: oklch(0.5417 0.1790 288.0332);
            --chart-1: oklch(0.5417 0.1790 288.0332);
            --chart-2: oklch(0.7042 0.1602 288.9880);
            --chart-3: oklch(0.5679 0.2113 276.7065);
            --chart-4: oklch(0.6356 0.1922 281.8054);
            --chart-5: oklch(0.4509 0.1758 279.3838);
            --sidebar: oklch(0.9580 0.0133 286.1454);
            --sidebar-foreground: oklch(0.3015 0.0572 282.4176);
            --sidebar-primary: oklch(0.5417 0.1790 288.0332);
            --sidebar-primary-foreground: oklch(1.0000 0 0);
            --sidebar-accent: oklch(0.9221 0.0373 262.1410);
            --sidebar-accent-foreground: oklch(0.3015 0.0572 282.4176);
            --sidebar-border: oklch(0.9115 0.0216 285.9625);
            --sidebar-ring: oklch(0.5417 0.1790 288.0332);
            --font-sans: Inter, sans-serif;
            --font-serif: Georgia, serif;
            --font-mono: JetBrains Mono, monospace;
            --radius: 0.5rem;
            --shadow-2xs: 0px 4px 10px 0px hsl(240 30% 25% / 0.06);
            --shadow-xs: 0px 4px 10px 0px hsl(240 30% 25% / 0.06);
            --shadow-sm: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12);
            --shadow: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12);
            --shadow-md: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12);
            --shadow-lg: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12);
            --shadow-xl: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12);
            --shadow-2xl: 0px 4px 10px 0px hsl(240 30% 25% / 0.30);
            --tracking-normal: 0em;
            --spacing: 0.25rem;
          }

          .dark {
            --background: oklch(0.1743 0.0227 283.7998);
            --foreground: oklch(0.9185 0.0257 285.8834);
            --card: oklch(0.2284 0.0384 282.9324);
            --card-foreground: oklch(0.9185 0.0257 285.8834);
            --popover: oklch(0.2284 0.0384 282.9324);
            --popover-foreground: oklch(0.9185 0.0257 285.8834);
            --primary: oklch(0.7162 0.1597 290.3962);
            --primary-foreground: oklch(0.1743 0.0227 283.7998);
            --secondary: oklch(0.3139 0.0736 283.4591);
            --secondary-foreground: oklch(0.8367 0.0849 285.9111);
            --muted: oklch(0.2710 0.0621 281.4377);
            --muted-foreground: oklch(0.7166 0.0462 285.1741);
            --accent: oklch(0.3354 0.0828 280.9705);
            --accent-foreground: oklch(0.9185 0.0257 285.8834);
            --destructive: oklch(0.6861 0.2061 14.9941);
            --destructive-foreground: oklch(1.0000 0 0);
            --border: oklch(0.3261 0.0597 282.5832);
            --input: oklch(0.3261 0.0597 282.5832);
            --ring: oklch(0.7162 0.1597 290.3962);
            --chart-1: oklch(0.7162 0.1597 290.3962);
            --chart-2: oklch(0.6382 0.1047 274.9117);
            --chart-3: oklch(0.7482 0.1235 244.7492);
            --chart-4: oklch(0.7124 0.0977 186.6761);
            --chart-5: oklch(0.7546 0.1831 346.8124);
            --sidebar: oklch(0.2284 0.0384 282.9324);
            --sidebar-foreground: oklch(0.9185 0.0257 285.8834);
            --sidebar-primary: oklch(0.7162 0.1597 290.3962);
            --sidebar-primary-foreground: oklch(0.1743 0.0227 283.7998);
            --sidebar-accent: oklch(0.3354 0.0828 280.9705);
            --sidebar-accent-foreground: oklch(0.9185 0.0257 285.8834);
            --sidebar-border: oklch(0.3261 0.0597 282.5832);
            --sidebar-ring: oklch(0.7162 0.1597 290.3962);
            --font-sans: Inter, sans-serif;
            --font-serif: Georgia, serif;
            --font-mono: JetBrains Mono, monospace;
            --radius: 0.5rem;
            --shadow-2xs: 0px 4px 10px 0px hsl(240 30% 25% / 0.06);
            --shadow-xs: 0px 4px 10px 0px hsl(240 30% 25% / 0.06);
            --shadow-sm: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12);
            --shadow: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12);
            --shadow-md: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12);
            --shadow-lg: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12);
            --shadow-xl: 0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12);
            --shadow-2xl: 0px 4px 10px 0px hsl(240 30% 25% / 0.30);
          }

          @theme inline {
            --color-background: var(--background);
            --color-foreground: var(--foreground);
            --color-card: var(--card);
            --color-card-foreground: var(--card-foreground);
            --color-popover: var(--popover);
            --color-popover-foreground: var(--popover-foreground);
            --color-primary: var(--primary);
            --color-primary-foreground: var(--primary-foreground);
            --color-secondary: var(--secondary);
            --color-secondary-foreground: var(--secondary-foreground);
            --color-muted: var(--muted);
            --color-muted-foreground: var(--muted-foreground);
            --color-accent: var(--accent);
            --color-accent-foreground: var(--accent-foreground);
            --color-destructive: var(--destructive);
            --color-destructive-foreground: var(--destructive-foreground);
            --color-border: var(--border);
            --color-input: var(--input);
            --color-ring: var(--ring);
            --color-chart-1: var(--chart-1);
            --color-chart-2: var(--chart-2);
            --color-chart-3: var(--chart-3);
            --color-chart-4: var(--chart-4);
            --color-chart-5: var(--chart-5);
            --color-sidebar: var(--sidebar);
            --color-sidebar-foreground: var(--sidebar-foreground);
            --color-sidebar-primary: var(--sidebar-primary);
            --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
            --color-sidebar-accent: var(--sidebar-accent);
            --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
            --color-sidebar-border: var(--sidebar-border);
            --color-sidebar-ring: var(--sidebar-ring);

            --font-sans: var(--font-sans);
            --font-mono: var(--font-mono);
            --font-serif: var(--font-serif);

            --radius-sm: calc(var(--radius) - 4px);
            --radius-md: calc(var(--radius) - 2px);
            --radius-lg: var(--radius);
            --radius-xl: calc(var(--radius) + 4px);

            --shadow-2xs: var(--shadow-2xs);
            --shadow-xs: var(--shadow-xs);
            --shadow-sm: var(--shadow-sm);
            --shadow: var(--shadow);
            --shadow-md: var(--shadow-md);
            --shadow-lg: var(--shadow-lg);
            --shadow-xl: var(--shadow-xl);
            --shadow-2xl: var(--shadow-2xl);
          }'''

  - id: testing-requirements
    title: Testing Requirements
    instruction: Define minimal testing requirements based on the chosen framework.
    elicit: true
    sections:
      - id: component-test-template
        title: Component Test Template
        instruction: Provide a basic component test template using the framework's recommended testing library. Include examples of rendering tests, user interaction tests, and mocking.
        type: code
        language: typescript
      - id: testing-best-practices
        title: Testing Best Practices
        type: numbered-list
        items:
          - "**Unit Tests**: Test individual components in isolation"
          - "**Integration Tests**: Test component interactions"
          - "**E2E Tests**: Test critical user flows (using Cypress/Playwright)"
          - "**Coverage Goals**: Aim for 80% code coverage"
          - "**Test Structure**: Arrange-Act-Assert pattern"
          - "**Mock External Dependencies**: API calls, routing, state management"

  - id: environment-configuration
    title: Environment Configuration
    instruction: List required environment variables based on the chosen framework. Show the appropriate format and naming conventions for the framework.
    elicit: true

  - id: frontend-developer-standards
    title: Frontend Developer Standards
    sections:
      - id: critical-coding-rules
        title: Critical Coding Rules
        instruction: List essential rules that prevent common AI mistakes, including both universal rules and framework-specific ones.
        elicit: true
      - id: quick-reference
        title: Quick Reference
        instruction: |
          Create a framework-specific cheat sheet with:
          - Common commands (dev server, build, test)
          - Key import patterns
          - File naming conventions
          - Project-specific patterns and utilities